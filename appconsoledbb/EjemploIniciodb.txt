using appconsoledbb;
using appconsoledbb.Data;
using appconsoledbb.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.IO;
using System.Linq;

namespace consolebdd.App
{
    public class Program
    {
        public static IConfigurationRoot? Configuration { get; set; }

        public static void Main(string[] args)
        {
            try
            {
                ReadConfiguration();

                using (var db = new SchoolContext())
                {
                    //Console.WriteLine("Creando base de datos...\n");

                    //db.Database.EnsureDeleted();
                    //db.Database.EnsureCreated();

                    //Console.WriteLine("Inicializando base de datos...\n");

                    //SchoolInitializer.Seed(db);

                    //Console.WriteLine("Base de datos inicializada exitosamente.\n");

                    //// Alta de Students
                    //var students = new[]
                    //{
                    //    new Student { FirstMidName = "Andrés", LastName = "Díaz", EnrollmentDate = DateTime.Parse("2022-01-01") },
                    //    new Student { FirstMidName = "David", LastName = "Lopez", EnrollmentDate = DateTime.Parse("2022-01-02") },
                    //    new Student { FirstMidName = "Izan", LastName = "Martinez", EnrollmentDate = DateTime.Parse("2022-01-03") },
                    //    new Student { FirstMidName = "Nacho", LastName = "Gonzalez", EnrollmentDate = DateTime.Parse("2022-01-04") },
                    //    new Student { FirstMidName = "El Excusas", LastName = "Perez", EnrollmentDate = DateTime.Parse("2022-01-05") }
                    //};
                    //db.Students.AddRange(students);
                    //db.SaveChanges();
                    //Console.WriteLine("Alta de Students realizada.\n");

                    //// Alta de Courses
                    //var courses = new[]
                    //{
                    //    new Course { Id = 1050, Title = "Chemistry", Credits = 3, DepartmentId = 1 },
                    //    new Course { Id = 4022, Title = "Microeconomics", Credits = 3, DepartmentId = 2 },
                    //    new Course { Id = 4041, Title = "Macroeconomics", Credits = 3, DepartmentId = 2 },
                    //    new Course { Id = 1045, Title = "Calculus", Credits = 4, DepartmentId = 1 },
                    //    new Course { Id = 3141, Title = "Trigonometry", Credits = 4, DepartmentId = 1 }
                    //};
                    //db.Courses.AddRange(courses);
                    //db.SaveChanges();
                    //Console.WriteLine("Alta de Courses realizada.\n");

                    //// Alta de Enrollments
                    //var enrollments = new[]
                    //{
                    //    new Enrollment { StudentId = students[0].Id, CourseId = courses[0].Id, Grade = Grade.A },
                    //    new Enrollment { StudentId = students[0].Id, CourseId = courses[1].Id, Grade = Grade.B },
                    //    new Enrollment { StudentId = students[1].Id, CourseId = courses[2].Id, Grade = Grade.C },
                    //    new Enrollment { StudentId = students[2].Id, CourseId = courses[3].Id, Grade = Grade.B },
                    //    new Enrollment { StudentId = students[3].Id, CourseId = courses[4].Id, Grade = Grade.F }
                    //};
                    //db.Enrollments.AddRange(enrollments);
                    //db.SaveChanges();
                    //Console.WriteLine("Alta de Enrollments realizada.\n");

                    //Console.WriteLine("Base de datos inicializada exitosamente.\n");

                    //// Ejemplo 1
                    //Console.WriteLine("Consultando estudiantes llamados Carson...\n");

                    //var carsonStudents = db.Students
                    //    .Where(s => s.FirstMidName == "Carson");

                    //foreach (var student in carsonStudents)
                    //{
                    //    Console.WriteLine($"ID del Estudiante: {student.Id}, Nombre: {student.FirstMidName} {student.LastName}, Fecha de Inscripción: {student.EnrollmentDate}\n");
                    //}

                    //// Ejemplo 2
                    //Console.WriteLine("Consultando estudiantes llamados Arturo...\n");
                    //var studentsQuery =
                    //    from student in db.Students
                    //    where student.FirstMidName == "Arturo"
                    //    select student;

                    //foreach (var student in studentsQuery)
                    //{
                    //    Console.WriteLine($"ID del Estudiante: {student.Id}, Nombre: {student.FirstMidName} {student.LastName}, Fecha de Inscripción: {student.EnrollmentDate}\n");
                    //}

                    //// Ejemplo 3
                    //// Consultando estudiantes inscritos entre 2002-01-01 y 2003-12-31
                    //Console.WriteLine("Consultando estudiantes inscritos entre 2002-01-01 y 2003-12-31...\n");
                    //var dateQuery =
                    //     from student in db.Students
                    //     where student.EnrollmentDate >= new DateTime(2002, 1, 1) && student.EnrollmentDate <= new DateTime(2003, 12, 31)
                    //     select student.FirstMidName;

                    //foreach (var studentFirstName in dateQuery)
                    //{
                    //    Console.WriteLine($"{studentFirstName}\n");
                    //}

                    //// Ejemplo 4
                    //// Consultando estudiantes inscritos entre 2002-01-01 y 2003-12-31
                    //Console.WriteLine("Consultando estudiantes inscritos entre 2002-01-01 y 2003-12-31...\n");
                    //var studentsEnrolledInPeriod = db.Students
                    //    .Where(s => s.EnrollmentDate >= new DateTime(2002, 1, 1) && s.EnrollmentDate <= new DateTime(2003, 12, 31))
                    //    .Select(s => s.FirstMidName);

                    //foreach (var studentFirstName in studentsEnrolledInPeriod)
                    //{
                    //    Console.WriteLine($"{studentFirstName}\n");
                    //}

                    //// Consultando estudiantes inscritos entre 2002-01-01 y 2003-12-31 y sus inscripciones
                    //Console.WriteLine("Consultando estudiantes inscritos entre 2002-01-01 y 2003-12-31 y sus inscripciones...\n");

                    //var studentsEnrolledInPeriod2 = db.Students
                    //    .Include(s => s.Enrollments) // Eagerly load the Enrollments
                    //    .Where(s => s.EnrollmentDate >= new DateTime(2002, 1, 1) && s.EnrollmentDate <= new DateTime(2003, 12, 31));

                    //foreach (var student in studentsEnrolledInPeriod2)
                    //{
                    //    Console.WriteLine($"ID del Estudiante: {student.Id}, Nombre: {student.FirstMidName} {student.LastName}, Fecha de Inscripción: {student.EnrollmentDate}");

                    //    foreach (var enrollment in student.Enrollments)
                    //    {
                    //        Console.WriteLine($"  ID del Curso: {enrollment.CourseId}, Grado: {enrollment.Grade}");
                    //    }
                    //}

                    //// Listar todos los Students que se inscribieron 2002-01-01 hasta 2003-12-31 y sus Enrollments con Include
                    //Console.WriteLine("TIPO 2c...\n");
                    //var studentsQ5 = db.Students
                    //    .Include(s => s.Enrollments) // Eagerly load the Enrollments
                    //    .Where(s => s.EnrollmentDate >= new DateTime(2002, 1, 1) && s.EnrollmentDate <= new DateTime(2003, 12, 31));

                    //foreach (Student student in studentsQ5)
                    //{
                    //    Console.WriteLine(student.FirstMidName);
                    //    Console.WriteLine(student.Enrollments.Count);
                    //}

                    //// Listar todos los Students que se inscribieron 2002-01-01 hasta 2003-12-31 y sus Enrollments sin Include y sin lazy proxies
                    //Console.WriteLine("TIPO 2c...\n");
                    //var studentsQ6 = db.Students
                    //    //.Include(s => s.Enrollments) // Eagerly load the Enrollments
                    //    .Where(s => s.EnrollmentDate >= new DateTime(2002, 1, 1) && s.EnrollmentDate <= new DateTime(2003, 12, 31));

                    //foreach (Student student in studentsQ6)
                    //{
                    //    Console.WriteLine(student.FirstMidName);

                    //    foreach (Enrollment enrollment in student.Enrollments)
                    //    {
                    //        Console.WriteLine(enrollment.Grade);
                    //    }
                    //}

                    //bool exit = false;
                    //while (!exit)
                    //{
                    //    Console.WriteLine("Menú Principal:");
                    //    Console.WriteLine("1. Tabla Students");
                    //    Console.WriteLine("2. Tabla Courses");
                    //    Console.WriteLine("3. Tabla Enrollments");
                    //    Console.WriteLine("4. Salir");
                    //    Console.Write("Seleccione una opción: ");

                    //    switch (Console.ReadLine())
                    //    {
                    //        case "1":
                    //            ShowSubMenu(db, "Students");
                    //            break;
                    //        case "2":
                    //            ShowSubMenu(db, "Courses");
                    //            break;
                    //        case "3":
                    //            ShowSubMenu(db, "Enrollments");
                    //            break;
                    //        case "4":
                    //            exit = true;
                    //            break;
                    //        default:
                    //            Console.WriteLine("Opción no válida. Intente de nuevo.");
                    //            break;
                    //    }
                    //}

                    //Console.WriteLine("Cerrando base de datos...\n");
                    Console.WriteLine("Creando base de datos...\n");

                    db.Database.EnsureDeleted();
                    db.Database.EnsureCreated();

                    Console.WriteLine("Inicializando base de datos...\n");

                    SchoolInitializer.Seed(db);

                    Console.WriteLine("Base de datos inicializada exitosamente.\n");

                    bool exit = false;
                    while (!exit)
                    {
                        Console.WriteLine("Menú Principal:");
                        Console.WriteLine("1. Tabla Students");
                        Console.WriteLine("2. Tabla Courses");
                        Console.WriteLine("3. Tabla Enrollments");
                        Console.WriteLine("4. Salir");
                        Console.Write("Seleccione una opción: ");

                        switch (Console.ReadLine())
                        {
                            case "1":
                                ShowSubMenu(db, "Students");
                                break;
                            case "2":
                                ShowSubMenu(db, "Courses");
                                break;
                            case "3":
                                ShowSubMenu(db, "Enrollments");
                                break;
                            case "4":
                                exit = true;
                                break;
                            default:
                                Console.WriteLine("Opción no válida. Intente de nuevo.");
                                break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ocurrió un error: {ex.Message}");
            }
        }

        private static void ReadConfiguration()
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json");
            Configuration = builder.Build();

            ConnectionString.DefaultConnection = Configuration["DefaultConnection"];

            Console.WriteLine("Configuración\n");
            Console.WriteLine($@"Cadena de conexión (defaultConnection) = ""{ConnectionString.DefaultConnection}""");
            Console.WriteLine();
        }

        private static void ShowSubMenu(SchoolContext db, string tableName)
        {
            bool exitSubMenu = false;
            while (!exitSubMenu)
            {
                Console.WriteLine($"\nMenú {tableName}:");
                Console.WriteLine("1. Alta");
                Console.WriteLine("2. Modificar");
                Console.WriteLine("3. Eliminar");
                Console.WriteLine("4. Volver al Menú Principal");
                Console.Write("Seleccione una opción: ");

                switch (Console.ReadLine())
                {
                    case "1":
                        PerformAlta(db, tableName);
                        break;
                    case "2":
                        PerformModificar(db, tableName);
                        break;
                    case "3":
                        PerformEliminar(db, tableName);
                        break;
                    case "4":
                        exitSubMenu = true;
                        break;
                    default:
                        Console.WriteLine("Opción no válida. Intente de nuevo.");
                        break;
                }
            }
        }

        private static void PerformAlta(SchoolContext db, string tableName)
        {
            try
            {
                switch (tableName)
                {
                    case "Students":
                        AltaDeStudents(db);
                        break;
                    case "Courses":
                        AltaDeCourses(db);
                        break;
                    case "Enrollments":
                        AltaDeEnrollments(db);
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ocurrió un error al dar de alta en {tableName}: {ex.Message}");
            }
        }

        private static void PerformModificar(SchoolContext db, string tableName)
        {
            // Implementar la lógica para modificar registros según la tabla seleccionada
            Console.WriteLine($"Modificación de registros en {tableName} no implementada.\n");
        }

        private static void PerformEliminar(SchoolContext db, string tableName)
        {
            // Implementar la lógica para eliminar registros según la tabla seleccionada
            Console.WriteLine($"Eliminación de registros en {tableName} no implementada.\n");
        }

        private static void AltaDeStudents(SchoolContext db)
        {
            Console.WriteLine("Alta de Students:");
            List<Student> students = new List<Student>();

            while (true)
            {
                try
                {
                    Console.Write("Ingrese el primer nombre: ");
                    string firstName = Console.ReadLine();
                    Console.Write("Ingrese el apellido: ");
                    string lastName = Console.ReadLine();
                    Console.Write("Ingrese la fecha de inscripción (yyyy-MM-dd): ");
                    DateTime enrollmentDate = DateTime.Parse(Console.ReadLine());

                    students.Add(new Student { FirstMidName = firstName, LastName = lastName, EnrollmentDate = enrollmentDate });

                    Console.Write("¿Desea agregar otro estudiante? (s/n): ");
                    if (Console.ReadLine().ToLower() != "s")
                        break;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ocurrió un error al agregar un estudiante: {ex.Message}");
                }
            }

            try
            {
                db.Students.AddRange(students);
                db.SaveChanges();
                Console.WriteLine("Alta de Students realizada.\n");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ocurrió un error al guardar los estudiantes: {ex.Message}");
            }
        }

        private static void AltaDeCourses(SchoolContext db)
        {
            Console.WriteLine("Alta de Courses:");
            List<Course> courses = new List<Course>();

            while (true)
            {
                try
                {
                    Console.Write("Ingrese el ID del curso: ");
                    int id = int.Parse(Console.ReadLine());
                    Console.Write("Ingrese el título del curso: ");
                    string title = Console.ReadLine();
                    Console.Write("Ingrese los créditos: ");
                    int credits = int.Parse(Console.ReadLine());
                    Console.Write("Ingrese el ID del departamento: ");
                    int departmentId = int.Parse(Console.ReadLine());

                    courses.Add(new Course { Id = id, Title = title, Credits = credits, DepartmentId = departmentId });

                    Console.Write("¿Desea agregar otro curso? (s/n): ");
                    if (Console.ReadLine().ToLower() != "s")
                        break;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ocurrió un error al agregar un curso: {ex.Message}");
                }
            }

            try
            {
                db.Courses.AddRange(courses);
                db.SaveChanges();
                Console.WriteLine("Alta de Courses realizada.\n");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ocurrió un error al guardar los cursos: {ex.Message}");
            }
        }

        private static void AltaDeEnrollments(SchoolContext db)
        {
            Console.WriteLine("Alta de Enrollments:");
            List<Enrollment> enrollments = new List<Enrollment>();

            while (true)
            {
                try
                {
                    Console.Write("Ingrese el ID del estudiante: ");
                    int studentId = int.Parse(Console.ReadLine());
                    Console.Write("Ingrese el ID del curso: ");
                    int courseId = int.Parse(Console.ReadLine());
                    Console.Write("Ingrese el grado (A, B, C, D, F): ");
                    Grade grade = (Grade)Enum.Parse(typeof(Grade), Console.ReadLine().ToUpper());

                    enrollments.Add(new Enrollment { StudentId = studentId, CourseId = courseId, Grade = grade });

                    Console.Write("¿Desea agregar otra inscripción? (s/n): ");
                    if (Console.ReadLine().ToLower() != "s")
                        break;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ocurrió un error al agregar una inscripción: {ex.Message}");
                }
            }

            try
            {
                db.Enrollments.AddRange(enrollments);
                db.SaveChanges();
                Console.WriteLine("Alta de Enrollments realizada.\n");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ocurrió un error al guardar las inscripciones: {ex.Message}");
            }
        }
    }
}
